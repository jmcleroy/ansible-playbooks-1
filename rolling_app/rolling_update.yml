---
# This playbook does a rolling update for all _managed_server_role_webservers serially (one at a time).
# Change the value of serial: to adjust the number of server to be updated.
#
# The three roles that apply to the webserver hosts will be applied: common,
# base-apache, and web. So any changes to configuration, package updates, etc,
# will be applied as part of the rolling update process.
#

# gather facts from monitoring nodes for iptables rules
- hosts: _managed_server_role_monitoring
  tasks: []

- hosts: _managed_server_role_webservers
  become: yes
  become_user: root
  serial: 1

  # These are the tasks to run before applying updates:
  pre_tasks:
#  - name: disable nagios alerts for this host webserver service
#    nagios: 'action=disable_alerts host={{ inventory_hostname }} services=webserver'
#    delegate_to: "{{ hostvars[item].ansible_host }}"
#    with_items: "{{ groups.monitoring }}"

#  - name: disable the server in haproxy
#    haproxy: 'state=disabled backend=myapplb host={{ inventory_hostname }} socket=/var/lib/haproxy/stats'
#    delegate_to: "{{ item }}"
#    become: yes
#    become_user: root
#    with_items: "{{ groups._managed_server_role_lbservers }}"

  - name: disable the server in haproxy
    command: echo "disable server myapplb/{{ inventory_hostname }}" | socat stdio /var/lib/haproxy/stats
    delegate_to: "{{ item }}"
    become: yes
    become_user: root
    with_items: "{{ groups.lbservers }}"

  roles:
  - common
  - base-apache
  - web

  # These tasks run after the roles:
  post_tasks:
  - name: wait for webserver to come up
    wait_for: 'host={{ hostvars[inventory_hostname].ansible_ssh_host }} port=80 state=started timeout=80'

  - name: enable the server in haproxy
    command: echo "enable server myapplb/{{ inventory_hostname }}" | socat stdio /var/lib/haproxy/stats
    delegate_to: "{{ item }}"
    become: yes
    become_user: root
    with_items: "{{ groups.lbservers }}"

#  - name: enable the server in haproxy
#    haproxy: 'state=enabled backend=myapplb host={{ inventory_hostname }} socket=/var/lib/haproxy/stats'
#    delegate_to: "{{ item }}"
#    become: yes
#    become_user: root
#    with_items: "{{ groups._managed_server_role_lbservers }}"

#  - name: re-enable nagios alerts
#    nagios: 'action=enable_alerts host={{ inventory_hostname }} services=webserver'
#    delegate_to: "{{ hostvars[item].ansible_host }}"
#    with_items: "{{ groups.monitoring }}"
